name: Pull Request Control for Staging Branch

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    types: [opened, reopened, edited]

jobs:
  check-pr:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check if the target branch of the PR is "staging"
      - name: Check target branch
        id: check-branch
        run: |
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          if [ "$TARGET_BRANCH" = "staging" ]; then
            echo "The target branch is staging."
            echo "is_staging=true" >> $GITHUB_OUTPUT
          else
            echo "The target branch is not staging."
            echo "is_staging=false" >> $GITHUB_OUTPUT
          fi

      # Step 2: Verify if the PR author is a member of the GogoJungle Vietnam team
      - name: Check if PR author is in GogoJungle Vietnam team
        id: check-team
        if: steps.check-branch.outputs.is_staging == 'true'
        run: |
          # Set the organization and team slug for GogoJungle Vietnam
          ORG="phtrungorg"
          TEAM_SLUG="vn-team"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          
          echo "Checking if user ${PR_AUTHOR} is a member of team ${TEAM_SLUG} in org ${ORG}"
          
          # Call the GitHub API to check team membership
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/${ORG}/teams/${TEAM_SLUG}/memberships/${PR_AUTHOR}")
          
          echo "HTTP response: $response"
          
          if [ "$response" -eq 200 ]; then
            echo "User ${PR_AUTHOR} is a member of team ${TEAM_SLUG} (GogoJungle Vietnam)."
            echo "is_team=true" >> $GITHUB_OUTPUT
          else
            echo "User ${PR_AUTHOR} is NOT a member of team ${TEAM_SLUG} (GogoJungle Vietnam)."
            echo "is_team=false" >> $GITHUB_OUTPUT
          fi

      # Step 3: For users in GogoJungle Vietnam, check if they are authorized to create PRs to the staging branch
      - name: Check PR author authorization for GogoJungle Vietnam team
        id: check-author
        if: steps.check-branch.outputs.is_staging == 'true' && steps.check-team.outputs.is_team == 'true'
        continue-on-error: true
        run: |
          # List of allowed users for creating PRs to staging; for example, only allow user 'phtrung212'
          ALLOWED_USERS="phtrung212"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          
          if [[ "$ALLOWED_USERS" != *"$PR_AUTHOR"* ]]; then
            echo "User $PR_AUTHOR is not authorized to create pull requests to the staging branch."
            exit 1
          else
            echo "User $PR_AUTHOR is authorized to create pull requests to the staging branch."
          fi

      # Step 4: If the user from GogoJungle Vietnam is unauthorized, add a comment and close the PR
      - name: Comment and Close PR if unauthorized for GogoJungle Vietnam team
        if: steps.check-branch.outputs.is_staging == 'true' && steps.check-team.outputs.is_team == 'true' && steps.check-author.outcome == 'failure'
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          COMMENT_BODY="Closed: User @${PR_AUTHOR} (member of GogoJungle Vietnam) is not authorized to create pull requests to the staging branch."
          
          echo "Adding comment to pull request #${PR_NUMBER}"
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            -d "{\"body\": \"${COMMENT_BODY}\"}"
          
          echo "Closing pull request #${PR_NUMBER}"
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" \
            -d '{"state": "closed"}'
